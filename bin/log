#!/bin/sh

# Custom subscript to show the report log.
# Usage:
#   $ hosts-monitor log --help
#
# Try 'hosts-monitor --help' for more information

# ==== /usr/local/bin/hosts-monitor @ 2018/4/3 by bassykuo <aaammmyyy27@gmail.com> ====
SUBPROG=$(echo $0 | awk -F'/' '{print $NF}')
. $install_dir/bin/profile

# ---[ Helps
show_help() {
    printf "%s\n" "Usage: $PROG $SUBPROG [OPTIONS] {-t|-s|-e|-u|-i|-S} <pattern>"
    printf "%s\n" "       $PROG $SUBPROG [OPTIONS] <pattern>"
    printf "%s\n" "       $PROG $SUBPROG {-a,--all}"
    printf "%s\n" "       $PROG $SUBPROG --tmp"
    echo ""
    format="%s\t%s\t%s\n"
    ( \
    printf $format "OPTIONS" "" ""
    printf $format "    --color={yes|no}" "highlight pattern or not" "[Default]: yes"
    printf "\n"
    printf $format "-t,--time <TIME>" "list specific date log" "<TIME>={today,yesterday,3/3/2017,4/1}"
    printf $format "-t <TIME1>,<TIME2>" "list log from TIME1 to TIME2" ""
    printf $format "-s,--service <SERVICE>" "list specific service log" "<SERVICE>={sshd,hosts-monitor}"
    printf $format "-e,--event <EVENT>" "list specific event log" "<EVENT>={Invalid-User,Failed-Password,Manual}"
    printf $format "-u,--user,--id <USERID>" "list specific login userid log" "<USERID>={admin,test,root,...}"
    printf $format "-i,--ip <IP>" "list specific login ip log" "<IP>=xxx.xxx.xxx.xxx"
    printf $format "-S,--status <STATUS>" "list specific ban/unban log" "<STATUS>={ban,unban}"
    printf $format "-a,--all" "list all log"
    printf $format "--tmp" "show temp file (i.e.short-report)"
    printf $format "<pattern>" "search lines with the regex pattern" "ex: 'Ban', '^2018.*root', '\\(root\\|admin\\|user\\)'"
    ) | column -e -t -s "$TAB" | awk '{print "   "$0}'
    echo ""
    echo "Example:"
    echo "   $PROG $SUBPROG -t yesterday -i 106.75.76.186"
    echo "   $PROG $SUBPROG 106.75.76.186 --color=no"
}

# ---[ Contents
while test $# -gt 0 ; do
    case $1 in
        "-h"|"--help"|"help")
            show_help
            exit 0
            ;;
        "-t"|"--time")
            flag=1
            time1=`echo $2 | awk -F, '{print $1}'`
            time2=`echo $2 | awk -F, '{print $2}'`
            time2=${time2:-$time1}
            #STR="$STR $(date -d ${time1:-'today'} '+%F')"
            #IDX="$IDX 1"
            timeseq=$(while test `date -d "$time1" '+%F'` != `date -d "$time2 + 1 day" '+%F'` ; do date -d "$time1" '+%F' ; time1=`date -d "$time1 + 1 days" '+%F'`; done)
            shift; shift;
            ;;
        "-s"|"--service")
            flag=1
            STR="$STR $2"
            IDX="$IDX 3"
            shift; shift;
            ;;
        "-e"|"--event")
            flag=1
            STR="$STR $2"
            IDX="$IDX 4"
            shift; shift;
            ;;
        "-u"|"--user"|"--id")
            flag=1
            STR="$STR $2"
            IDX="$IDX 5"
            shift; shift;
            ;;
        "-i"|"--ip")
            flag=1
            STR="$STR $2"
            IDX="$IDX 6"
            shift; shift;
            ;;
        "-S"|"--status")
            flag=1
            s=$(echo $2 | sed 's/[bB][aA][nN]/Ban/g; s/[uU][nN][bB][aA][nN]/Unban/g') #grep "^[Bb][Aa][Nn]" > /dev/null && s="^Ban" || s=$2
            STR="$STR $s"
            IDX="$IDX 7"
            shift; shift;
            ;;
        "-a"|"--all")
            flag=1
            STR="$(date '+%Y')"
            IDX="1"
            shift;
            ;;
        "--tmp")
            printf ">>> Show temp: $BOLD%s$RESET\n" "$shortrepo"
            print_header
            sed 1d $shortrepo
            exit 0
            ;;
        --color|--color=*)
            if $(echo $1 | grep '=' > /dev/null) ; then 
                cop=$(echo $1 | awk -F'=' '{print $2}')
            else
                shift; cop=$1
            fi
            shift;
            ;;
        -*)
            errmsg "unrecognized option '$1'"
            exit 0
            ;;
        *)
            pattern=$1
            printf "Search pattern: $BOLD%s$RESET\n" "$pattern"
            shift;
            #case $1 in
                #--color|--color=*)
                    #if $(echo $1 | grep '=' > /dev/null) ; then 
                        #cop=$(echo $1 | awk -F'=' '{print $2}')
                    #else
                        #shift; cop=$1
                    #fi
                    #;;
                #*)
                    #;;
            #esac
            #print_header
            #cat ${report}* | grep --color=${cop:-yes} -i "$pattern" | sort || sed 1d $shortrepo
            #exit 0
            ;;
    esac
done

print_header
if [ -z "$flag" ] ; then
    pattern=${pattern:-$(date -d today '+%F')}
fi
if [ -n "$pattern" ] ; then
    # Serach pattern
    cat ${report}* | grep --color=${cop:-yes} -i "$pattern" | sort
    grep "$pattern" ${report}* > /dev/null || echo "(NOT FOUND)"
else
    if [ -z "$timeseq" ] ; then
        awk -v "idxes=$IDX" -v "strs=$STR" \
            'BEGIN{    split(idxes, idx, / +/);
                     n=split(strs, str, / +/); }
            { flag=1; for (i=2;i<=n;i++) {
                if (tolower($idx[i]) !~ tolower(str[i])) { flag=0; break; } }
              if(flag) print $0 }' ${report}* | grep "\($(echo $STR | sed "s/ /\\\|/g;")\)" --color=${cop:-yes} | sort
    else
        for t in $timeseq ; do
            awk -v "idxes=$IDX 1" -v "strs=$STR $t" \
                'BEGIN{    split(idxes, idx, / +/);
                         n=split(strs, str, / +/); }
                { flag=1; for (i=2;i<=n;i++) {
                    if (tolower($idx[i]) !~ tolower(str[i])) { flag=0; break; } }
                  if(flag) print $0 }' ${report}* | grep "\($(echo "$STR $t" | sed "s/ /\\\|/g;")\)" --color=${cop:-yes} | sort
        done
    fi
fi
