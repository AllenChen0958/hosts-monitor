#!/bin/sh

# Custom subscript to show the status of the specific ip.
# Usage:
#     hosts-monitor show --help
#
# Try 'hosts-monitor --help' for more information

# ==== /usr/local/bin/hosts-monitor @ 2018/4/3 by bassykuo <aaammmyyy27@gmail.com> ====
SUBPROG=$(echo $0 | awk -F'/' '{print $NF}')
. $install_dir/bin/profile

# ---[ Help
show_help() {
    printf "%s\n" "Usage: $PROG $SUBPROG <IP>"
    echo ""
    format="%s\t%s\t%s\n"
    ( \
    printf $format "<IP>" "show the status of the specific ip" ""
    ) | column -t -s "$TAB" | awk '{print "   "$0}'
    echo ""
    echo "Example:"
    echo "   $PROG $SUBPROG 114.89.20.1 185.99.195.9"
    exit 0
}

# ---[ Functions
show_status() {
    printf "$BOLD%s$RESET\n" "$1"           # ip: xxx.xxx.xxx.xxx
    printf "%-9s %s\n" "status:" "$2"       # status: Ban(red) or Accept(green)
    printf "%-9s %s\n" "location:" "$3"     # location: /etc/hosts.deny or /etc/hosts.allow or default
    shift; shift; shift;
    printf "%-9s %s\n" "comment:" "$*"      # comment: description
    printf "\n"
}
check_and_show_status() {
    if grep "\s$1\s" $hosts_deny > /dev/null; then
        commit=$(grep "\s$1\s" $hosts_deny | sed -n 's/^[^#]*# *//; $p')
        show_status $1 "${RED}Ban$RESET" $hosts_deny $commit

    elif grep "\s$1\s" $hosts_allow > /dev/null; then
        commit=$(grep "\s$1\s" $hosts_allow | sed -n 's/^[^#]*# *//; $p')
        show_status $1 "${GREEN}Accept$RESET" $hosts_allow $commit

    else
        if grep "\s$1" $hosts_deny > /dev/null; then
            printf "Cannot match $RED$BOLD$1$RESET Find similar case ...\n\n"
            for ip in $(grep --color=no "\s$1" $hosts_deny | awk '{print $2}' | uniq); do
                commit=$(grep "\s$ip" $hosts_deny | sed -n 's/^[^#]*# *//; $p')
                show_status $ip "${RED}Ban$RESET" $hosts_deny $commit
            done
        else
            show_status $1 "${GREEN}Accept$RESET" "(default)" ""
        fi
    fi
}

# ---[ Content
if [ $# -eq 0 ] ; then
    echo "$PROG $SUBPROG: invalid ip '$@'"
    echo "Try '$PROG $SUBPROG --help' for more information."
    exit 0
fi
case $1 in
    "-h"|"--help"|"help")
        show_help
        ;;
    -*)
        echo "$PROG $SUBPROG: invalid option '$@'"
        echo "Try '$PROG $SUBPROG --help' for more information."
        exit 0
        ;;
    *)
        while test $# -gt 0; do
            check_ip $1 && IP=$1 || exit 1
            check_and_show_status $IP
            shift
        done
        ;;
esac
